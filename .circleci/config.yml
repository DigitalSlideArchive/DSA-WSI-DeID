---
version: 2.1
executors:
  toxandnode:
    working_directory: ~/project
    docker:
      - image: girder/tox-and-node
      - image: mongo:latest
        command: bash -c "mkdir /dev/shm/mongo && mongod --dbpath=/dev/shm/mongo --noauth --bind_ip_all"
commands:
  usedockers:
    description: "Make built dockers available"
    steps:
      - run:
          name: Upgrade pip
          command: pip install -U pip
      - run:
          name: Install dependencies
          command: pip install ansible requests docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived docker images
          command: |
            docker load -i /tmp/workspace/wsi_deid_girder.tar
  easyocr:
    description: Install libraries for easyocr
    steps:
      - run:
          name: Install libraries for easyocr
          command: apt-get update && apt-get install -y libsm6 libxext6 libxrender-dev libgl1-mesa-dev
  tox:
    description: "Run tox"
    parameters:
      env:
        type: string
    steps:
      - run:
          name: Preinstall phantomjs to work around an npm permission issue
          command: npm install -g phantomjs-prebuilt --unsafe-perm
      - run:
          name: Run tests via tox
          # Piping through cat does less buffering of the output but can
          # consume the exit code
          command: PYTEST_ADDOPTS=--reruns=3 PYTEST_NUMPROCESSES=2 tox -e << parameters.env >> | cat; test ${PIPESTATUS[0]} -eq 0
  coverage:
    description: "Upload coverage"
    steps:
      - run:
          name: Install Codecov client
          command: |
              curl -Os https://uploader.codecov.io/latest/linux/codecov
              chmod +x codecov
      - run:
          name: Upload coverage
          # Retry as codecov can be flaky
          command: for i in $(seq 1 10); do [ $i -gt 1 ] && echo "retrying $i" && sleep 5; ./codecov --disable search pycov gcov --file .tox/coverage/py_coverage.xml,.tox/coverage/cobertura-coverage.xml && s=0 && break || s=$?; done; (exit $s)
jobs:
  py38:
    executor: toxandnode
    steps:
      - checkout
      - easyocr
      - tox:
          env: py38
      - coverage
  py39:
    executor: toxandnode
    steps:
      - checkout
      - easyocr
      - tox:
          env: py39
      - coverage
  py310:
    executor: toxandnode
    steps:
      - checkout
      - easyocr
      - tox:
          env: py310
      - coverage
  py311:
    executor: toxandnode
    steps:
      - checkout
      - easyocr
      - tox:
          env: py311
      - coverage
  lint_and_docs:
    executor: toxandnode
    steps:
      - checkout
      - tox:
          env: lint,lintclient
  test:
    docker:
      - image: girder/tox-and-node
      - image: mongo:latest
        command: bash -c "mkdir /dev/shm/mongo && mongod --dbpath=/dev/shm/mongo --noauth --bind_ip_all"
    steps:
      - checkout
      - run:
          name: Install libraries for easyocr
          command: apt-get update && apt-get install -y libsm6 libxext6 libxrender-dev libgl1-mesa-dev
      - run:
          name: Preinstall phantomjs to work around an npm permission issue
          command: |
            npm config set unsafe-perm true || true
            npm install --global node-gyp
            npm install --global phantomjs-prebuilt
      - run:
          name: Run server tests
          no_output_timeout: 15m
          command: PYTEST_ADDOPTS=--reruns=3 tox
      - run:
          name: Run web tests
          command: |
            npm install
            npm run lint
          working_directory: wsi_deid/web_client
  docker-compose:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout
      - run:
          name: Run docker build
          command: bash -c 'docker build --force-rm -t dsarchive/wsi_deid .'
          working_directory: .
      - run:
          name: Make a local config file.
          command: bash -c 'cp docker-compose.example.local.yml docker-compose.local.yml && sed -i "s/:stable//g" docker-compose.local.yml && sed -i "s/c:\\\\NCI_WSI/\\/tmp\\/wsi_deid\\/import/g" docker-compose.local.yml  && sed -i "s/c:\\\\DeID_WSI/\\/tmp\\/wsi_deid\\/export/g" docker-compose.local.yml && mkdir -p /tmp/wsi_deid/import && mkdir -p /tmp/wsi_deid/export'
          working_directory: ./devops/wsi_deid
      - run:
          name: Run docker-compose up
          command: bash -c 'docker-compose -f docker-compose.pilot.yml -f docker-compose.local.yml up -d'
          working_directory: ./devops/wsi_deid
      - run:
          name: Wait for girder to respond and be configured
          command: |
            for f in `seq 60`; do if curl --silent http://localhost:8080/api/v1/system/version | grep 'release'; then break; fi; sleep 1; done
      - run:
          name: Archive docker images
          command: |
            docker save -o wsi_deid_girder.tar dsarchive/wsi_deid:latest
      - persist_to_workspace:
          root: .
          paths:
            - ./wsi_deid_girder.tar
      - store_artifacts:
          path: ./wsi_deid_girder.tar
      - run:
          name: Report wsi_deid version
          command: |
            docker run dsarchive/wsi_deid bash -c 'python3 -c "import wsi_deid;print(wsi_deid.__version__)" 2>/dev/null'
  publish-docker:
    working_directory: ~/project
    machine:
      image: ubuntu-2004:202111-02
    steps:
      - checkout
      - usedockers
      - run:
          name: Publish images to Docker Hub
          command: |
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
              docker push dsarchive/wsi_deid:latest
              if [[ $CIRCLE_TAG =~ ^v.*$ ]]; then
              docker tag dsarchive/wsi_deid:latest "dsarchive/wsi_deid:$CIRCLE_TAG"
              docker push "dsarchive/wsi_deid:$CIRCLE_TAG"
              docker tag dsarchive/wsi_deid:latest dsarchive/wsi_deid:stable
              docker push dsarchive/wsi_deid:stable
              fi
  scan-docker:
    docker:
      - image: docker:stable-git
    steps:
      - checkout
      - setup_remote_docker
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Install trivy
          command: |
            apk add --update-cache --upgrade curl
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
      - run:
          name: Scan the local image with trivy; fail on high or critical vulnerabilities
          command: trivy image --scanners vuln --input /tmp/workspace/wsi_deid_girder.tar --exit-code 1 --severity HIGH,CRITICAL --no-progress
      - run:
          name: Scan the local image with trivy; report low and medium vulnerabilities, but don't fail
          command: trivy image --scanners vuln image --input /tmp/workspace/wsi_deid_girder.tar --exit-code 0 --severity LOW,MEDIUM,UNKNOWN --no-progress

workflows:
  version: 2
  ci:
    jobs:
      - py38:
          filters:
            tags:
              only: /^v.*/
      - py39:
          filters:
            tags:
              only: /^v.*/
      - py310:
          filters:
            tags:
              only: /^v.*/
      - py311:
          filters:
            tags:
              only: /^v.*/
      - lint_and_docs:
          filters:
            tags:
              only: /^v.*/
      - docker-compose:
          filters:
            tags:
              only: /^v.*/
      - scan-docker:
          requires:
            - docker-compose
          filters:
            tags:
              only: /^v.*/
      - publish-docker:
          requires:
            - py38
            - py39
            - py310
            - py311
            - lint_and_docs
            - docker-compose
            - scan-docker
          filters:
            tags:
              only: /^v.*/
            branches:
              only:
                - master
  periodic:
    triggers:
      - schedule:
          cron: "0 6 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - py38
      - py39
      - py310
      - py311
      - lint_and_docs
      - docker-compose
      - scan-docker:
          requires:
            - docker-compose
      - publish-docker:
          requires:
            - py38
            - py39
            - py310
            - py311
            - lint_and_docs
            - docker-compose
            - scan-docker
