---
services:
  girder:
    image: dsarchive/wsi_deid:latest
    restart: unless-stopped
    # To have full capabilities with S3 assetstores, we use a user file system
    # (fuse).  This requires some privileges.  This is not needed if only
    # filesystem assetstores are used.  Instead of privileged mode, fuse can
    # use specific devices, security_opt, and cap_add:
    # devices:
    #   - /dev/fuse:/dev/fuse
    # security_opt:
    #   - apparmor:unconfined
    # cap_add:
    #   - SYS_ADMIN
    # but these may be somewhat host specific, so we default to privileged.  If
    # the docker daemon is being run with --no-new-privileges, fuse may not
    # work.
    # See also https://github.com/docker/for-linux/issues/321 for possible
    # methods to avoid both privileged mode and cap_add SYS_ADMIN.
    privileged: true
    # Set DSA_PORT to expose the interface on another port (default 8080).
    ports:
      - "${DSA_PORT:-8080}:8080"
    # Set DSA_USER to a user id that is part of the docker group (e.g.,
    # `DSA_USER=$(id -u):$(id -g)`).  This makes files in assetstores and logs
    # owned by that user and provides permissions to manage docker
    environment:
      DSA_USER: ${DSA_USER:-}
      GIRDER_CONFIG: /conf/girder.local.conf
      PROVISION: tasks
    volumes:
      # Needed to use slicer_cli_web to run docker containers
      - /var/run/docker.sock:/var/run/docker.sock
      # Default assetstore
      - fsdata:/assetstore
      - logs:/logs
      # Change for local files:
      # - ./assetstore:/assetstore
      # - ./logs:/logs
      # Location of girder.local.conf and provision.py; add to use local
      # versions
      # - .:/conf
      # Add for import and export location.  This can also be done with a
      # docker-compose.local.yml file.  See the example.
      # - <some local path>:/import
      # - <some local path>:/export
      - ./worker.local.cfg:/venv/lib/python3.11/site-packages/girder_worker/worker.local.cfg
    depends_on:
      - mongodb
      - memcached
      - rabbitmq
  mongodb:
    image: "mongo:latest"
    restart: unless-stopped
    volumes:
      # Location to store database files
      # Change for local files:
      # - ./db:/data/db
      # - ./logs:/var/log/mongodb
      - dbdata:/data/db
  memcached:
    image: memcached
    command: -m 4096
    restart: unless-stopped
  # rabbitmq is used to communicate to the worker to run tasks
  rabbitmq:
    image: "rabbitmq:latest"
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-}
    volumes:
      - ./rabbitmq.advanced.config:/etc/rabbitmq/advanced.config:ro
  worker:
    image: dsarchive/wsi_deid:latest
    # Set DSA_USER to a user id that is part of the docker group (e.g.,
    # `DSA_USER=$(id -u):$(id -g)`).  This provides permissions to manage
    # docker
    environment:
      DSA_USER: ${DSA_USER:-}
      PROVISION: worker
      C_FORCE_ROOT: true
    restart: unless-stopped
    volumes:
      # Needed to use slicer_cli_web to run docker containers
      - /var/run/docker.sock:/var/run/docker.sock
      # Needed to allow transferring data to slicer_cli_web docker containers
      - ${TMPDIR:-/tmp}:${TMPDIR:-/tmp}
      - ./worker.local.cfg:/venv/lib/python3.11/site-packages/girder_worker/worker.local.cfg
    depends_on:
      - rabbitmq
    command: bash -c "C_FORCE_ROOT=true PROVISION=worker python /conf/provision.py && python -m girder_worker --concurrency=1 -Ofair --prefetch-multiplier=1"

volumes:
  dbdata:
  fsdata:
  logs:
