---
services:
  girder:
    # For the original pilot project, set this to dsarchive/wsi_deid:v2.2.1
    image: dsarchive/wsi_deid:latest
    # Set CURRENT_UID to your user id (e.g., `CURRENT_UID=$(id -u):$(id -g)`)
    # so that local file assetstores and logs are owned by yourself.
    # user: ${CURRENT_UID}
    restart: unless-stopped
    # To have full capabilities with S3 assetstores, we use a user file system
    # (fuse).  This requires some privileges.  This is not needed if only
    # filesystem assetstores are used.  Instead of privileged mode, fuse can
    # use specific devices, security_opt, and cap_add:
    # devices:
    #   - /dev/fuse:/dev/fuse
    # security_opt:
    #   - apparmor:unconfined
    # cap_add:
    #   - SYS_ADMIN
    # but these may be somewhat host specific, so we default to privileged.  If
    # the docker daemon is being run with --no-new-privileges, fuse may not
    # work.
    # See also https://github.com/docker/for-linux/issues/321 for possible
    # methods to avoid both privileged mode and cap_add SYS_ADMIN.
    privileged: true
    # Set DSA_PORT to expose the interface on another port (default 8080).
    ports:
      - "${DSA_PORT:-8080}:8080"
    environment:
      - GIRDER_CONFIG=/conf/girder.local.conf
    volumes:
      # Default assetstore
      - fsdata:/assetstore
      - logs:/logs
      # Change for local files:
      # - ./assetstore:/assetstore
      # - ./logs:/logs
      # Location of girder.local.conf and provision.py; add to use local
      # versions
      # - .:/conf
      # Add for import and export location.  This can also be done with a
      # docker-compose.local.yml file.  See the example.
      # - <some local path>:/import
      # - <some local path>:/export
      # Copy a specific schema to the location where the program expects it
      # - ./importManifestSchema.example.allowall.json:/usr/local/lib/python3.9/dist-packages/wsi_deid/schema/importManifestSchema.json
      # For iSyntax support, add an appropriate link to a the appropriately
      # licensed Philips Pathology SDK.  Make sure the left side is the path to
      # the unzipped local python 3.8 sdk.
      # - /mnt/localpath/iSyntax/philips-pathologysdk-2.0-L1-ubuntu20_04_py38_research:/isyntax
    depends_on:
      - mongodb
      - memcached
    # For iSynax support, change the default start command.  If you have
    # add - .:/conf to your volumes, use:
    # command: /conf/install_and_start_isyntax.sh
    # otherwise, use
    # command: /wsi_deid/devops/wsi_deid/install_and_start_isyntax.sh
  mongodb:
    image: "mongo:latest"
    # Set CURRENT_UID to your user id (e.g., `CURRENT_UID=$(id -u):$(id -g)`)
    # so that local file database and logs are owned by yourself.
    # user: ${CURRENT_UID}
    restart: unless-stopped
    volumes:
      # Location to store database files
      # Change for local files:
      # - ./db:/data/db
      # - ./logs:/var/log/mongodb
      - dbdata:/data/db
  memcached:
    image: memcached
    command: -m 4096
    restart: unless-stopped

volumes:
  dbdata:
  fsdata:
  logs:
