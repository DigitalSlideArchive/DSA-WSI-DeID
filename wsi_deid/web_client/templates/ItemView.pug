-
  var folderButtonList = {
    ingest: ['process', 'quarantine', 'ocr', 'matching', 'reject'],
    quarantine: ['process', 'unquarantine', 'reject'],
    processed: ['quarantine', 'finish'],
    rejected: ['quarantine'],
    original: ['quarantine'],
    finished: ['quarantine'],
    unfiled: ['matching']
  };
  var buttons = {
    process: {name: 'Redact Image', title: 'Keep a copy of the original image, redact marked fields, and move the result to the redacted folder', color: 'success'},
    reject: {name: 'Reject', title: 'Select this if redaction is insufficient.  The image will be moved to the rejected folder', color: 'danger'},
    quarantine: {name: 'Quarantine', title: 'Move this image to the quarantined folder for redaction', color: 'warning'},
    unquarantine: {name: 'Undo Quarantine', title: 'Move this image back to its previous location before it was quarantined', color: 'default'},
    finish: {name: 'Approve', title: 'Move this image to the approved folder', color: 'primary'},
    ocr: {name: 'Find Label Text', title: 'Perform OCR on this image', color: 'default'},
    matching: {name: 'Database Lookup', title: 'Lookup records from a configured database', color: 'default', class: 'g-matching-button'},
    refile: {name: 'Refile Image', title: 'Pick or assign a name to the image and move it to be processed.', color: 'success'}
  };
  var buttonList = folderButtonList[project_folder] || ['quarantine']
  if (!hasMatchingApi) {
    buttonList = buttonList.filter((val) => val !== 'matching');
  }

.g-widget-metadata-header.workflow
  i.icon-right-circled
  |  WSI DeID Workflow
.g-widget-metadata-container.workflow
  if project_folder === 'unfiled'
    span.g-refile-controls
      | File as
      select.g-refile-select
        option(value='__none__') Manually specify
      span(title="Refile with this TokenID (folder) name")
        | TokenID
        input.g-refile-tokenid
      span(title="Refile with this ImageID (item) name")
        | ImageID
        input.g-refile-imageid
      button.g-refile-button.btn(class='btn-'+buttons.refile.color, action=button, title=buttons.refile.title) #{buttons.refile.name}
  for button in buttonList
    - var isDisabled = button === 'reject' && require_reject_reason
    button.btn(class='btn-'+buttons[button].color + ' ' + (buttons[button].class || 'g-workflow-button'), action=button, title=buttons[button].title, disabled=isDisabled) #{buttons[button].name}
  if buttonList.includes('reject') && rejection_reasons.length > 0 && require_reject_reason
    select.wsi-deid-reject-reason.form-control.input-sm(title="Select a reason for rejecting this image")
      option(value="none", selected=true) Keep (do not reject)
      for cat in rejection_reasons
        if cat.types
          optgroup(label=cat.text)
            for reason in cat.types
              option(value=reason.key, category=cat.category)
                = reason.text
        else
          option(value=cat.key, cateogry=cat.category)
            = cat.text
